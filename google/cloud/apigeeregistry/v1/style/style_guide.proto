// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

// (-- api-linter: core::0215::versioned-packages=disabled
//     aip.dev/not-precedent: Support protos for the apigeeregistry.v1 API. --)
package google.cloud.apigeeregistry.v1.style;

import "google/api/field_behavior.proto";
import "google/cloud/apigeeregistry/v1/style/lint.proto";

option java_package = "com.google.cloud.apigeeregistry.v1.style";
option java_multiple_files = true;
option java_outer_classname = "StyleGuideProto";
option go_package = "github.com/apigee/registry/pkg/application/style;style";

// StyleGuide defines a set of guidelines and linters that govern the
// static analysis of API Specs with specified mime types.
message StyleGuide {
  // Identifier of the style guide.
  string id = 1 [(google.api.field_behavior) = REQUIRED];

  // Artifact kind. May be used in YAML representations to identify the type of
  // this artifact.
  string kind = 2;

  // Human-meaningful name of the style guide.
  string display_name = 3 [(google.api.field_behavior) = REQUIRED];

  // This field lists the MIME types of the specs that the style guide applies
  // to. It is a list containing style (format) descriptors that are specified
  // as a Media Type (https://en.wikipedia.org/wiki/Media_type).
  // Possible values include "application/vnd.apigee.proto",
  // "application/vnd.apigee.openapi", and "application/vnd.apigee.graphql",
  // with possible suffixes representing compression types. These hypothetical
  // names are defined in the vendor tree defined in RFC6838
  // (https://tools.ietf.org/html/rfc6838) and are not final.
  repeated string mime_types = 4 [(google.api.field_behavior) = REQUIRED];

  // A list of guidelines that are specified by this style guide.
  repeated Guideline guidelines = 5;

  // A list of linters that this style guide uses.
  repeated Linter linters = 6;
}

// Guideline defines a set of rules that achieve a common design
// goal for API specs.
message Guideline {
  // Identifier of the guideline.
  string id = 1 [(google.api.field_behavior) = REQUIRED];

  // Human-meaningful name of the guideline.
  string display_name = 2 [(google.api.field_behavior) = REQUIRED];

  // A detailed description of the guideline.
  string description = 3;

  // A list of rules that this guideline specifies.
  repeated Rule rules = 4;

  // Possible states for this guideline.
  enum State {
    // The default value, unused.
    STATE_UNSPECIFIED = 0;
    // The guideline is being proposed, and shouldn't yet
    // be enforced.
    PROPOSED = 1;
    // The guideline is active and should be enforced.
    ACTIVE = 2;
    // The guideline is deprecated as of the recent version,
    // and shouldn't be enforced.
    DEPRECATED = 3;
    // The guideline has been disabled and shouldn't be enforced.
    DISABLED = 4;
  }

  // Indicates the state of the guideline.
  State state = 5;
}

// Rule is a specific design rule that can be applied to an API spec,
// and is enforced by a specified linter.
message Rule {
  // Identifier of the rule.
  string id = 1 [(google.api.field_behavior) = REQUIRED];

  // Human-meaningful name of the rule.
  string display_name = 2;

  // A detailed description of the rule.
  string description = 3;

  // Name of the linter that enforces this rule.
  string linter = 4 [(google.api.field_behavior) = REQUIRED];

  // Name of the rule on the linter that enforces it.
  string linter_rulename = 5 [(google.api.field_behavior) = REQUIRED];

  // Possible severities for the violation of a rule.
  enum Severity {
    // The default value, unused.
    SEVERITY_UNSPECIFIED = 0;
    // Violation of the rule is an error that must be fixed.
    ERROR = 1;
    // Violation of the rule is a pattern that is wrong,
    // and should be warned about.
    WARNING = 2;
    // Violation of the rule is not necessarily a bad pattern
    // or error, but information the user should be aware of.
    INFO = 3;
    // Violation of the rule is a hint that is provided to
    // the user to fix their spec's design.
    HINT = 4;
  }

  // Severity of violating this rule.
  Severity severity = 6;
  
  // A link to additional documentation relating to this rule.
  string doc_uri = 7;
}
