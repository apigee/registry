# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Nightly Build

on:
  schedule:
    - cron: '0 0 * * *' # each 12:00 UTC

jobs:

  test-race:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: "1.20"
        cache: true
    - run: go install ./...
    - run: registry config configurations create local --registry.address='127.0.0.1:8080' --registry.insecure
    - uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - run: go test -race ./...

  test-postgres:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres          # super user
          POSTGRES_PASSWORD: postgres      # password is required
          POSTGRES_HOST_AUTH_METHOD: trust # allow other connections without password
        options: >-                        # wait until postgres has started
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432 # map local port
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: "1.20"
        cache: true
    - run: go install ./...
    - run: registry config configurations create local --registry.address='127.0.0.1:8080' --registry.insecure
    - uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create db and test user
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGUSER: postgres # super user
        PGPASSWORD: postgres
      run: psql -c "CREATE USER registry_tester" -c "CREATE DATABASE registry_test WITH OWNER registry_tester" 

    - run: go test ./server/registry -postgresql
    
    - run: registry-server &
    
    - name: Test standalone registry server using the remote proxy
      run: go test ./server/registry -remote
    
    - name: Test standalone registry server using the remote proxy in hosted mode
      env:
        PROJECTID: hosted-ci-test
      run: |
        registry rpc admin create-project --project_id=$PROJECTID --json
        go test ./server/registry -hosted $PROJECTID
    
  bench:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres          # super user
          POSTGRES_PASSWORD: postgres      # password is required
          POSTGRES_HOST_AUTH_METHOD: trust # allow other connections without password
        options: >-                        # wait until postgres has started
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432 # map local port
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-go@v3
      with:
        go-version: "1.20"
        cache: true
    - run: go install ./...
    - run: registry config configurations create local --registry.address='127.0.0.1:8080' --registry.insecure
    - uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create db and test user
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGUSER: postgres # super user
        PGPASSWORD: postgres
      run: psql -c "CREATE USER registry_tester" -c "CREATE DATABASE registry_test WITH OWNER registry_tester" 

    - run: registry-server &
    
    - name: Run benchmarks run on a standalone registry server
      env:
        PROJECTID: bench
        ITERATIONS: 5
      run: |
        registry rpc admin create-project --project_id=$PROJECTID --json
        go test ./tests/benchmark --bench=. --project_id=$PROJECTID --benchtime=${ITERATIONS}x --timeout=0
