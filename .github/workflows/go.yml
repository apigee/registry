# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Go

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main
jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    services:
      postgres:
        image: postgres
        env:
          # Define a super user. Password for super user is required.
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          # Allow other connections without a password.
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started.
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Map tcp service container port 5432 to the host.
          - 5432:5432
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.18

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.45
        args: --timeout 5m0s

    - name: Install
      run: go install ./...

    - name: Test everything with SQLite
      run: registry-server & make test
      env:
        APG_REGISTRY_ADDRESS: localhost:8080 
        APG_REGISTRY_INSECURE: 1

    - name: Configure PostgreSQL
      env:
        # Connect to the locally mapped port.
        PGHOST: localhost
        PGPORT: 5432
        # Use the super user for configuration.
        PGUSER: postgres
        PGPASSWORD: postgres
      # Create the database and user required by the PostgreSQL tests.
      run: psql -c "CREATE DATABASE registry_test" -c "CREATE USER registry_tester"

    - name: Test registry server with PostgreSQL
      run: go test ./server/registry -postgresql

    - name: Verify that benchmarks run
      env:
        APG_REGISTRY_ADDRESS: localhost:8080 
        APG_REGISTRY_INSECURE: 1
        PROJECTID: bench
        ITERATIONS: 1
      run: |
        registry rpc admin create-project --project_id=$PROJECTID --json
        go test ./tests/benchmark --bench=. --project_id=$PROJECTID --benchtime=${ITERATIONS}x --timeout=0

    - name: Compute code coverage
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        APG_REGISTRY_ADDRESS: localhost:8080 
        APG_REGISTRY_INSECURE: 1
      run: |
        go clean -testcache
        go test -race -coverprofile=coverage.txt -covermode=atomic ./...
        curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import # One-time step
        curl -Os https://uploader.codecov.io/latest/linux/codecov
        curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
        curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
        gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
        shasum -a 256 -c codecov.SHA256SUM
        chmod +x codecov
        ./codecov -t ${CODECOV_TOKEN}
