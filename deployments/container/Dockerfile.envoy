# This Dockerfile builds an image that runs the registry-server behind an
# included Envoy proxy.

# Use the official Golang image to create a build artifact.
# This is based on Debian and sets the GOPATH to /go.
# https://hub.docker.com/_/golang
FROM golang:1.15 as builder

# use aarch_64 for arm64
ARG ARCH=x86_64

RUN apt-get update
RUN apt-get install unzip
RUN curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.15.1/protoc-3.15.1-linux-$ARCH.zip > /tmp/protoc.zip
RUN unzip /tmp/protoc.zip -d /usr/local

# Create and change to the app directory.
WORKDIR /app

# Retrieve application dependencies.
# This allows the container build to reuse cached dependencies.
COPY go.* ./
RUN go mod download

# Copy local code to the container image.
COPY . ./

# Compile protos.
RUN make protos

# Build registry-server.
RUN CGO_ENABLED=0 GOOS=linux go build -v -o registry-server ./cmd/registry-server

# Build authz-server.
RUN CGO_ENABLED=0 GOOS=linux go build -v -o authz-server ./cmd/authz-server

# Use an Envoy release image to get envoy in the image.
FROM envoyproxy/envoy:v1.16.0

ARG DB_CONFIG=registry

COPY deployments/container/RUN-WITH-ENVOY.sh /RUN-WITH-ENVOY.sh
COPY deployments/envoy/envoy.yaml /etc/envoy/envoy.yaml
COPY deployments/envoy/proto.pb /proto.pb

# Copy the registry-server binary to the production image from the builder stage.
COPY --from=builder /app/registry-server /registry-server

# Copy the authz-server binary to the production image from the builder stage.
COPY --from=builder /app/authz-server /authz-server

# Copy configuration files to the production image.
COPY config/${DB_CONFIG}.yaml /registry.yaml
COPY cmd/authz-server/authz.yaml /authz.yaml

# Make sure that the CMD (below, which runs as the envoy user) is able to rewrite /etc/envoy/envoy.yaml
RUN chown -R envoy /etc/envoy

# Run the web service on container startup.
CMD ["/RUN-WITH-ENVOY.sh"]
